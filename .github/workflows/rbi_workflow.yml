name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

     # Step: Set up Gradle
    - name: Set up Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: '8.12'  # Change to the version of Gradle you want

    # Set the WORKSPACE environment variable
    - name: Set WORKSPACE environment variable
      run: echo "WORKSPACE=${GITHUB_WORKSPACE}" >> $GITHUB_ENV

    # Step 2: Install Chrome on Windows
    - name: Install Google Chrome
      run: |
        $chromeInstaller = "chrome_installer.exe"
        Invoke-WebRequest -Uri "https://dl.google.com/chrome/install/latest/chrome_installer.exe" -OutFile $chromeInstaller
        Start-Process -FilePath $chromeInstaller -Args "/silent /install" -NoNewWindow -Wait
        Remove-Item $chromeInstaller -Force
        $env:PATH += ";C:\Program Files\Google\Chrome\Application"

    - name: Install Latest Stable ChromeDriver
      run: |
          # Fetch the latest stable Chrome version dynamically from Chrome for Testing
          $chromeDriverVersionUrl = "https://googlechromelabs.github.io/chrome-for-testing/LATEST_RELEASE_STABLE"
          $chromeDriverVersion = Invoke-WebRequest -Uri $chromeDriverVersionUrl -UseBasicParsing | Select-Object -First 1
          Write-Host "Latest ChromeDriver Version: $chromeDriverVersion"

          # Construct the download URL for ChromeDriver using the fetched Chrome version
          $chromeDriverUrl = "https://storage.googleapis.com/chrome-for-testing-public/$chromeDriverVersion/win64/chromedriver-win64.zip"
    
          # Set temporary paths for download
          $tempPath = [System.IO.Path]::GetTempPath()
          $chromeDriverZipPath = Join-Path -Path $tempPath -ChildPath "chromedriver.zip"
          $chromeDriverExtractPath = "C:\tools\chromedriver"

          # Download ChromeDriver
          Write-Host "Downloading ChromeDriver..."
          Invoke-WebRequest -Uri $chromeDriverUrl -OutFile $chromeDriverZipPath -UseBasicParsing
    
          # Extract ChromeDriver with force overwrite option
          Write-Host "Extracting ChromeDriver..."
          Expand-Archive -Path $chromeDriverZipPath -DestinationPath $chromeDriverExtractPath -Force
          Remove-Item -Path $chromeDriverZipPath  # Clean up the zip file

          # List the files in the extraction folder for debugging
          Write-Host "Listing files in $chromeDriverExtractPath"
          Get-ChildItem -Path $chromeDriverExtractPath

          # Check if chromedriver.exe exists in the main directory and remove it
          if (Test-Path "$chromeDriverExtractPath\chromedriver.exe") {
              Write-Host "Removing existing chromedriver.exe..."
              Remove-Item "$chromeDriverExtractPath\chromedriver.exe" -Force
          }

          # Now move the new chromedriver.exe from the chromedriver-win64 folder to the main directory
          Write-Host "Moving chromedriver.exe from chromedriver-win64 folder..."
          Move-Item "$chromeDriverExtractPath\chromedriver-win64\chromedriver.exe" "$chromeDriverExtractPath\chromedriver.exe"
          Remove-Item -Recurse -Force "$chromeDriverExtractPath\chromedriver-win64"  # Clean up the folder

          # Add ChromeDriver to PATH (for the current session)
          $env:PATH += ";C:\tools\chromedriver"

          # Verify ChromeDriver installation
          Write-Host "Verifying ChromeDriver installation..."
          $chromedriverVersion = & "C:\tools\chromedriver\chromedriver.exe" --version
          Write-Host $chromedriverVersion

   # Step 6: Grant execute permission for Gradle wrapper (Windows-compatible method)
    - name: Grant execute permission for Gradle wrapper (Windows)
      run: |
          $gradlewPath = "./gradlew"
          icacls $gradlewPath /grant "Authenticated Users:(RX)"

    # Run tests using Gradle Wrapper (Windows)
    - name: Run Selenium tests
      working-directory: mission
      run: |
        gradle clean test "-Dsuite.name=rbi_meetinglist" --info
